[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Little About Me",
    "section": "",
    "text": "Hi there! My name is Fatima and I’m a student at Baruch College pursuing my Master’s in Business Analytics after earning my degree in Accounting this past Spring. I look forward to a wonderful semester with you all!"
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Exploring the Fiscal Characteristics of Major US Public Transit Systems",
    "section": "",
    "text": "Fatima W. | 09/22/2024\n\n\n\n7 Train Sunset, Anne Marie Clarke, 2022. Source: Flickr\n\n\n\nObjective\nAs cities expand and populations grow across the US, public transit continues to play a critical role in minimizing harmful emissions, reducing congestion, and is essential in providing accessible transit options. However, at what cost is it worth? Ultimately, passengers would love the idea of free transportation. Yet the financial health of transit systems across the country remains a challenge to most areas. One way this is measured is the farebox recovery ratio, that is, how much a transit system’s costs are covered by passenger fares. Essentially, it’s the fraction of revenues made from the fares we pay instead of taxes. It then comes to a question where we ask ourselves, are the transit systems we use really worth the money we pay? What does a fiscally healthy transit service look like and how efficient is it? How do transit systems across the country compare?\n\n\nThe Data Explained\nWhile the farebox ratio does provide key insights about a transit’s operational efficiency, it is a starting point to the many other factors that subjectively impact what a healthy transit service may look like. In this analysis, I’ll be using data obtained from the National Transit Database (NTD) to analyze and judge the efficiency of US transit systems. More specifically, focus will be placed on farebox revenues, total revenues and expenses, and the total number of passenger trips and vehicle miles traveled. Data is compiled over the years from as early as 2002 to present day, however for purposes of my analysis, I will be using the 2022 version of the reports. This is done by combining several variables from the 2022 Fare Revenue table, the latest Monthly Ridership tables, and the 2022 Operating Expenses reports.\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n  download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                destfile=\"2022_fare_revenue.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`, \n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`)\n\n# Next, expenses\nif(!file.exists(\"2022_expenses.csv\")){\n  download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                destfile=\"2022_expenses.csv\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(`NTD ID`, \n         `Agency`,\n         `Total`, \n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n# Monthly Transit Numbers\nlibrary(tidyverse)\nif(!file.exists(\"ridership.xlsx\")){\n  download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                destfile=\"ridership.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`, \n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nAfter cleaning and joining the data and renaming some of our variables, it is finally ready for our use. The table below is a sample of our data, showcasing the variables used in uncovering farebox recovery ratios and ridership trends over time:\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nUSAGE &lt;- USAGE |&gt;\n  rename(metro_area = 'UZA Name')\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\", \n    Mode == \"DR\" ~ \"Demand Response\", \n    Mode == \"FB\" ~ \"Ferryboat\", \n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\", \n    Mode == \"TB\" ~ \"Trolleybus\", \n    Mode == \"VP\" ~ \"Vanpool\", \n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\"~ \"Bus Rapid Transit\", \n    Mode == \"LR\" ~ \"Light Rail\", \n    Mode == \"YR\" ~ \"Hybrid Rail\", \n    Mode == \"MG\" ~ \"Monorail/Automated guideway transit\", \n    Mode == \"CR\" ~ \"Commuter Rail\", \n    Mode == \"AR\" ~ \"Alaska Railroad\", \n    Mode == \"TR\" ~ \"Aerial Tramways\", \n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\", \n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"))\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month = as.character(month)) |&gt; \n  select(-`NTD ID`,-`3 Mode`) |&gt;\n  DT::datatable()\n\n\n\n\n\nWhile most variables’ names are self-explanatory, it’s important to note the following:\n\nUPT\n\nstands for “Unlinked Passenger Trips”; it is the total number of individual passenger boardings or trips on a transit system.\n\nVRM\n\nstands for “Vehicle Revenue Miles”; it is the total number of miles that transit vehicles travel when in service.\n\n\n\n\nService Capacity: Vehicle Revenue Miles (VRM)\nOne of the key indicators of transit efficiency is VRM (Vehicle Revenue Miles), which is a measure of how much service an agency provides to the public. High levels of VRM generally indicates there is high passenger demand for service, operations may be performed over large areas, and/or frequent trips are provided to passengers. This offers more opportunities for riders to access public transit, impacting the efficiency of a transit system.\nWithin our dataset, I found the MTA New York City Transit to have the highest total VRM of nearly 11 billion miles traveled:\n\nagency_most_vrm &lt;- USAGE |&gt; \n  group_by(Agency) |&gt;\n  summarize(total_agency_vrm = sum(VRM)) |&gt;\n  arrange(desc(total_agency_vrm)) |&gt;\n  slice(1)\n  \nprint(agency_most_vrm)\n\n# A tibble: 1 × 2\n  Agency                    total_agency_vrm\n  &lt;chr&gt;                                &lt;dbl&gt;\n1 MTA New York City Transit      10832855350\n\n\nThis suggests the MTA transit system is a significant contributor among other public transit systems across the US. As a resident of New York City, this finding was unsurprising to me considering the majority of the population heavily relies on public transit in the overcrowded city.\nIt’s also noteworthy to mention that this number is inclusive of all modes of transportation (i.e. bus, heavy rail, etc.). Taking a look at which transit mode has the highest VRM:\n\nmode_most_vrm &lt;- USAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(total_mode_vrm = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_mode_vrm)) |&gt;\n  slice(1)\n  \nprint(mode_most_vrm)\n\n# A tibble: 1 × 2\n  Mode  total_mode_vrm\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Bus      49444494088\n\n\nWe see that buses were found to have the most VRM in total, which can be due to a variety of reasons. For example, do passengers use public bus transport because they may be safer and/or more convenient than other modes of transportation? Or is it possible that buses are the only means of transportation in the area? These are just a few points to consider when analyzing such results.\n\nmode_nyc &lt;- USAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\") |&gt;\n  group_by(Mode) |&gt;\n  summarize(total_nycmode_vrm = sum(VRM)) |&gt;\n  arrange(desc(total_nycmode_vrm)) |&gt;\n  slice(1)\n  \nprint(mode_nyc)\n\n# A tibble: 1 × 2\n  Mode       total_nycmode_vrm\n  &lt;chr&gt;                  &lt;dbl&gt;\n1 Heavy Rail        7732916753\n\n\nAdditionally, I wanted to see which mode of transport contributed the most to the MTA’s high VRM, which was found to be (as I expected) heavy rail, or the subway. It is no surprise that the subway plays one of the most important roles in traveling across urban areas like New York City. Overall, it’s interesting to see the difference of modes impacting VRM across New York City and the nation overall.\n\n\nRidership Trends & Unlinked Passenger Trips (UPT): Pre & Post Pandemic\nWhile VRM is a useful variable in measuring transit efficiency, UPT (Unlinked Passenger Trips) proves to be another critical measure, that is, the ridership levels. Higher levels of UPT generally indicates there is a strong demand for its respective transit services.\nNow if we continue taking a look at the MTA New York City agency’s numbers for heavy rail, we’ll see that over 230 million trips were taken by passengers in May of 2024 alone:\n\nmay2024_nyctrips &lt;- USAGE |&gt;\n  filter(Mode == \"Heavy Rail\", month &gt;= \"2024-05-01\", month &lt;= \"2024-05-31\") |&gt;\n  summarize(nyc_may24 = sum(UPT, na.rm = TRUE))\n\nprint(may2024_nyctrips)\n\n# A tibble: 1 × 1\n  nyc_may24\n      &lt;dbl&gt;\n1 237383777\n\n\nWhile this number may seem high and suggests the city’s continued reliance on subway systems in New York, this certainly was not the case due to the COVID-19 pandemic that began nearly four years ago. Since the lockdown in NYC officially began in mid March, we’ll take a look at the total number of UPT for the month of April in 2019, and compare it against that of 2020.\n\ndiff_april_total_ridership &lt;- USAGE |&gt;\n  filter(Mode == \"Heavy Rail\", \n         (month &gt;= \"2019-04-01\" & month &lt;= \"2019-04-30\") |\n         (month &gt;= \"2020-04-01\" & month &lt;= \"2020-04-30\")) |&gt;\n  group_by(month) |&gt;\n  summarize(april_total_upt = sum(UPT, na.rm = TRUE)) |&gt;\n  summarize(april_difference = \n              sum(april_total_upt[month &gt;= \"2020-04-01\" & month &lt;= \"2020-04-30\"]) - \n              sum(april_total_upt[month &gt;= \"2019-04-01\" & month &lt;= \"2019-04-30\"]))\n\nprint(diff_april_total_ridership)\n\n# A tibble: 1 × 1\n  april_difference\n             &lt;dbl&gt;\n1       -296416858\n\n\nBetween April 2019 and April 2020, the MTA NYC’s transit ridership severely declined by nearly 300 million passenger trips. Undoubtedly, the impact of the COVID-19 pandemic on NYC’s transit system was significant since concerns of health safety and remote work increased during the lockdown, among many other factors.\nOf course, the MTA was not the only agency impacted by the pandemic. Below are the top ten agencies with the highest passenger ridership decline between 2019 and 2020:\n\npandemic_ridership_2019 &lt;- USAGE |&gt; \n  filter(month &gt;= \"2019-01-01\" & month &lt;= \"2019-12-31\") |&gt;\n  group_by(Agency) |&gt;\n  summarize(upt_2019 = sum(UPT, na.rm = TRUE))\n\npandemic_ridership_2020 &lt;- USAGE |&gt;\n  filter(month &gt;= \"2020-01-01\" & month &lt;= \"2020-12-31\") |&gt;\n  group_by(Agency) |&gt;\n  summarize(upt_2020 = sum(UPT, na.rm = TRUE))\n\n#create a new df to find the ridership difference btwn the two years:\n\npandemic_ridership_decline &lt;- left_join(pandemic_ridership_2019, pandemic_ridership_2020, by = \"Agency\") |&gt;\n  mutate(ridership_decline = upt_2020 - upt_2019) |&gt;\n  arrange(ridership_decline)\n\nprint(pandemic_ridership_decline)\n\n# A tibble: 502 × 4\n   Agency                                    upt_2019 upt_2020 ridership_decline\n   &lt;chr&gt;                                        &lt;dbl&gt;    &lt;dbl&gt;             &lt;dbl&gt;\n 1 MTA New York City Transit                   3.46e9   1.54e9       -1924202310\n 2 Chicago Transit Authority                   4.56e8   1.97e8        -258243748\n 3 Washington Metropolitan Area Transit Aut…   3.63e8   1.28e8        -235044193\n 4 Massachusetts Bay Transportation Authori…   3.63e8   1.48e8        -215279246\n 5 Southeastern Pennsylvania Transportation…   3.10e8   1.37e8        -173413816\n 6 Los Angeles County Metropolitan Transpor…   3.74e8   2.16e8        -158172651\n 7 New Jersey Transit Corporation              2.68e8   1.23e8        -144204949\n 8 City and County of San Francisco            2.19e8   8.91e7        -130190690\n 9 San Francisco Bay Area Rapid Transit Dis…   1.28e8   3.51e7         -92453618\n10 MTA Long Island Rail Road                   1.14e8   4.35e7         -70756457\n# ℹ 492 more rows\n\n\nThe MTA suffered the most significant decline in ridership, having lost nearly 1.92 billion trips, followed by the Chicago Transit Authority and Washington Metro. There’s a trend we can see here where major cities across the US are hit the hardest with ridership lost during the pandemic. It makes sense in heavily populated cities where citizens typically rely on public transportation daily. Nonetheless, the health crisis has revealed the weaknesses of transit systems during this difficult time.\n\n\nRidership Recovery & Preferred Modes of Travel\nDespite the sharp declines agencies have faced, these systems have begun to adapt to the new changes brought on since the pandemic in recent years. If we take a look at the top ten metro areas with the highest ridership in 2023, we can clearly see these select transit systems are up and running well:\n\nhighest_ridership_2023 &lt;- USAGE |&gt;\n  filter(month &gt;= \"2023-01-01\" & month &lt;= \"2023-12-31\") |&gt;\n  group_by(metro_area) |&gt;\n  summarize(upt_2023 = sum(UPT)) |&gt;\n  arrange(desc(upt_2023))\n\nprint(highest_ridership_2023)\n\n# A tibble: 291 × 2\n   metro_area                              upt_2023\n   &lt;chr&gt;                                      &lt;dbl&gt;\n 1 New York--Jersey City--Newark, NY--NJ 3267734375\n 2 Los Angeles--Long Beach--Anaheim, CA   405828291\n 3 Chicago, IL--IN                        332200253\n 4 Washington--Arlington, DC--VA--MD      298703885\n 5 San Francisco--Oakland, CA             268616926\n 6 Boston, MA--NH                         244459896\n 7 Philadelphia, PA--NJ--DE--MD           208815405\n 8 Seattle--Tacoma, WA                    153044584\n 9 Miami--Fort Lauderdale, FL             117709423\n10 San Diego, CA                           80364849\n# ℹ 281 more rows\n\n\nUnsurprisingly, the New York/New Jersey metro area had the highest ridership results of roughly 3.27 billion trips, with Los Angeles and Chicago following behind it. Seeing how NYC/New Jersey’s ridership statistics significantly surpasses other metro areas’ UPT, it suggests its commuters have a unique dependence on the city’s transit system when compared to other more car-dependent cities like Chicago and Los Angeles. Overall, these figures highlight the transit systems’ ability to bounce back, especially in major urban cities where traffic congestion and dense populations make public transit a crucial necessity.\nMoving onto preferred modes of travel, I was interested to see which is preferred when given two options: heavy rail and bus.\n\npreferred_mode &lt;- USAGE |&gt;\n  filter(Mode == \"Heavy Rail\" | Mode == \"Bus\") |&gt;\n  group_by(Mode) |&gt;\n  summarize(mode_upt = sum(UPT, na.rm = TRUE)) |&gt;\n  arrange(desc(mode_upt))\n\nprint(preferred_mode)\n\n# A tibble: 2 × 2\n  Mode          mode_upt\n  &lt;chr&gt;            &lt;dbl&gt;\n1 Bus        97720629073\n2 Heavy Rail 73571166122\n\n\nWe can see buses had roughly 97.7 billion riders in transit systems across the nation, whereas heavy rail had recorded 73.5 billion riders. I found this interesting because I had expected there to be more passengers that rode the train for a number of assumptions. One of these includes the assumption that trains travel faster than buses and naturally, passengers would prefer to take the train to get to their destination quicker. However I failed to consider that not only is heavy rail transportation likely more expensive to operate (and therefore may be more costly for the passenger’s fare price), but it’s also possible that commuters don’t have the option to choose between these modes of transportation. One may have no choice but to take a bus to their destination. Anyhow, this finding emphasizes the importance of buses for millions of riders across the country, despite urban areas’ dependence on heavy rail transportation.\n\n\nFarebox Recovery\nUp until this point, there has been much discussion about high levels of ridership and the amount of service provided by transit agencies. Previously stated, farebox recovery refers to the ratio of a transit’s operational costs to its passenger fares. As we begin to analyze farebox ratios and efficiency of transit systems, I’ll be focusing on major transit systems that are greater than or equal to 400,000 UPT for the year 2022 by creating a new dataframe with additional variables:\n\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  filter(month &gt;= \"2022-01-01\" & month &lt;= \"2022-12-31\") |&gt;\n  group_by(`NTD ID`, Agency, metro_area, Mode, UPT, VRM) |&gt;\n  summarize(UPT = sum(UPT, na.rm = TRUE),\n            VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  ungroup()\n\n# Have to fix abbreviations with full name for the variable Mode before left join:\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\", \n    Mode == \"DR\" ~ \"Demand Response\", \n    Mode == \"FB\" ~ \"Ferryboat\", \n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\", \n    Mode == \"TB\" ~ \"Trolleybus\", \n    Mode == \"VP\" ~ \"Vanpool\", \n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\"~ \"Bus Rapid Transit\", \n    Mode == \"LR\" ~ \"Light Rail\", \n    Mode == \"YR\" ~ \"Hybrid Rail\", \n    Mode == \"MG\" ~ \"Monorail/Automated guideway transit\", \n    Mode == \"CR\" ~ \"Commuter Rail\", \n    Mode == \"AR\" ~ \"Alaska Railroad\", \n    Mode == \"TR\" ~ \"Aerial Tramways\", \n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\", \n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"))\n\n\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, \n                                  FINANCIALS, \n                                  join_by(`NTD ID`, Mode)) |&gt;\n  drop_na()\n\nUsing the newly created dataframe, USAGE_AND_FINANCIALS, I’ll first determine which transit agency had the highest UPT based on heavy rail and buses in 2022:\n\nmost_upt_2022 &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(highest_upt = max(UPT)) |&gt;\n  arrange(desc(highest_upt))\n\nprint(most_upt_2022)\n\n# A tibble: 146 × 3\n# Groups:   Agency [112]\n   Agency                                                   Mode     highest_upt\n   &lt;chr&gt;                                                    &lt;chr&gt;          &lt;dbl&gt;\n 1 MTA New York City Transit                                Heavy R…   171843098\n 2 MTA New York City Transit                                Bus         41244091\n 3 Los Angeles County Metropolitan Transportation Authority Bus         17344080\n 4 Chicago Transit Authority                                Bus         13300536\n 5 Chicago Transit Authority                                Heavy R…    10275760\n 6 Washington Metropolitan Area Transit Authority           Heavy R…    10242435\n 7 New Jersey Transit Corporation                           Bus          9977943\n 8 MTA Bus Company                                          Bus          9144229\n 9 Washington Metropolitan Area Transit Authority           Bus          8838389\n10 Southeastern Pennsylvania Transportation Authority       Bus          8670359\n# ℹ 136 more rows\n\n\nAs we previously discussed at length, the MTA New York City Transit continued to lead in UPT, with roughly 172 million trips in heavy rail, followed by 41 million trips in buses. However when we go on to calculate agencies with the highest farebox recovery ratio, calculated as total fares divided by expenses:\n\nhighest_fare_recov &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(fare_rec_rate = `Total Fares`/Expenses) |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(highest_ratio = max(fare_rec_rate)) |&gt;\n  arrange(desc(highest_ratio))\n\nprint(highest_fare_recov)\n\n# A tibble: 146 × 3\n# Groups:   Agency [112]\n   Agency                                                    Mode  highest_ratio\n   &lt;chr&gt;                                                     &lt;chr&gt;         &lt;dbl&gt;\n 1 Anaheim Transportation Network                            Bus           0.865\n 2 City of Gainesville, FL                                   Bus           0.548\n 3 MTA New York City Transit                                 Heav…         0.435\n 4 Massachusetts Bay Transportation Authority                Heav…         0.375\n 5 Woods Hole, Martha's Vineyard and Nantucket Steamship Au… Ferr…         0.335\n 6 Metro-North Commuter Railroad Company, dba: MTA Metro-No… Comm…         0.331\n 7 Centre Area Transportation Authority                      Bus           0.324\n 8 MTA Long Island Rail Road                                 Comm…         0.286\n 9 Southeastern Pennsylvania Transportation Authority        Heav…         0.253\n10 Regional Transportation Commission of Southern Nevada     Bus           0.252\n# ℹ 136 more rows\n\n\nWe see that the Anaheim Transportation Network (ATN) had the highest farebox recovery ratio of 86.5%, meaning most of its bus operating costs are covered by its passenger fares. Contrastingly, the MTA’s heavy rail system was ranked 43.5%, which is nearly half the farebox ratio of ATN. These comparisons don’t stop here; if we take a look at which transit system had the lowest expenses per UPT:\n\nlowest_exp_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(exp_per_upt = Expenses/UPT) |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(min_exp_upt = min(exp_per_upt)) |&gt;\n  arrange(min_exp_upt)\n\nprint(lowest_exp_upt)\n\n# A tibble: 146 × 3\n# Groups:   Agency [112]\n   Agency                                                     Mode   min_exp_upt\n   &lt;chr&gt;                                                      &lt;chr&gt;        &lt;dbl&gt;\n 1 Anaheim Transportation Network                             Bus           12.8\n 2 University of Georgia                                      Bus           14.9\n 3 University of Michigan Parking and Transportation Services Bus           16.2\n 4 Town of Blacksburg                                         Bus           17.5\n 5 Ames Transit Agency                                        Bus           21.5\n 6 Centre Area Transportation Authority                       Bus           23.5\n 7 MTA New York City Transit                                  Heavy…        31.1\n 8 Greater Lafayette Public Transportation Corporation        Bus           31.5\n 9 San Diego Metropolitan Transit System                      Light…        31.6\n10 Champaign-Urbana Mass Transit District                     Bus           39.8\n# ℹ 136 more rows\n\n\nAgain we find ATN to rank first, indicating their financial efficiency at $12.80 per UPT. Meanwhile, the MTA had results much higher than that of ATN, roughly $31 per UPT. With such a high expense per rider, one would assume that the agency’s fare revenue generated would cover a larger proportion of its operating expenses. Yet the MTA’s low farebox ratio reveals the agency’s needs for additional funding to cover its costs. So although the MTA’s heavy rail service serves a much greater population over New York City’s four boroughs, these findings may suggest that smaller transit systems operate more cost-efficiently, whereas major city transit systems like the MTA are challenged with covering higher operational costs related to the extent and complexity of their services offered.\n\n\nOperational & Financial Efficiency\nFurthering the analysis of public transit’s operational and financial efficiency, we’ll now take a look at the fares and expenses incurred, still keeping our focus on major transit systems that are greater than or equal to 400,000 UPT for the year 2022. When calculating which system had the highest total fares per UPT:\n\nhighest_fare_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(fare_per_upt = `Total Fares`/UPT) |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(max_fare_upt = max(fare_per_upt, na.rm = TRUE)) |&gt;\n  arrange(desc(max_fare_upt))\n\nprint(highest_fare_upt)\n\n# A tibble: 146 × 3\n# Groups:   Agency [112]\n   Agency                                                     Mode  max_fare_upt\n   &lt;chr&gt;                                                      &lt;chr&gt;        &lt;dbl&gt;\n 1 New Jersey Transit Corporation                             Bus          525. \n 2 Metro-North Commuter Railroad Company, dba: MTA Metro-Nor… Comm…        161. \n 3 Northeast Illinois Regional Commuter Railroad Corporation  Comm…        146. \n 4 New Jersey Transit Corporation                             Comm…        119. \n 5 MTA New York City Transit                                  Comm…        112. \n 6 Massachusetts Bay Transportation Authority                 Bus          106. \n 7 Massachusetts Bay Transportation Authority                 Comm…         84.4\n 8 Woods Hole, Martha's Vineyard and Nantucket Steamship Aut… Ferr…         78.0\n 9 MTA Long Island Rail Road                                  Comm…         73.9\n10 Peninsula Corridor Joint Powers Board                      Comm…         67.5\n# ℹ 136 more rows\n\n\nWe found that the New Jersey Transit Corporation for buses had the highest fares of $525 per UPT. Following this is the MTA’s Metro-North Railroad’s commuter bus, costing $161 per UPT, and further down is the MTA NYC’s transit commuter bus costing $112 per UPT. These findings may be due to a number of possible suggestions, such as the type of commuters being served. For example, it’s possible that certain systems serve higher-income commuters which allows systems to charge higher prices and as a result generate more revenue, even if its overall ridership is lower when compared to other agencies.\nAnother important question to consider is which transit system had the lowest expenses per VRM in order to find out which agency provides the best cost-effective services based on miles traveled:\n\nlowest_exp_vrm &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(exp_per_vrm = Expenses/VRM) |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(min_exp_vrm = min(exp_per_vrm, na.rm = TRUE)) |&gt;\n  arrange(min_exp_vrm)\n\nprint(lowest_exp_vrm)\n\n# A tibble: 146 × 3\n# Groups:   Agency [112]\n   Agency                                              Mode       min_exp_vrm\n   &lt;chr&gt;                                               &lt;chr&gt;            &lt;dbl&gt;\n 1 Interurban Transit Partnership                      Bus               77.2\n 2 City of El Paso                                     Bus               85.8\n 3 Des Moines Area Regional Transit Authority          Bus               86.3\n 4 Central Florida Regional Transportation Authority   Bus               87.5\n 5 San Francisco Bay Area Rapid Transit District       Heavy Rail        88.8\n 6 Transportation District Commission of Hampton Roads Bus               88.9\n 7 City of Gainesville, FL                             Bus               90.1\n 8 Greater Lafayette Public Transportation Corporation Bus               90.5\n 9 Ames Transit Agency                                 Bus               92.0\n10 Delaware Transit Corporation                        Bus               92.4\n# ℹ 136 more rows\n\n\nThe Interurban Transit Partnership was found to have the lowest expenses per VRM at $77.20, followed by City of El Paso and Des Moines Area Regional Transit Authority, all of which are bus transportation. It’s important to consider not only the mode, since certain vehicles are more costly than others to run, but also the demand for public transit as we’ve discussed earlier. Depending on the size of transit systems and service provided, it likely affects the agency’s ability to operate efficiently on a per-mile basis.\nTo further assess transit systems’ revenue efficiency, we should also consider the highest total fares per VRM:\n\nhighest_fare_vrm &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(fare_per_vrm = `Total Fares`/VRM) |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(max_fare_vrm = max(fare_per_vrm, na.rm = TRUE)) |&gt;\n  arrange(desc(max_fare_vrm))\n\nprint(highest_fare_vrm)\n\n# A tibble: 146 × 3\n# Groups:   Agency [112]\n   Agency                                                     Mode  max_fare_vrm\n   &lt;chr&gt;                                                      &lt;chr&gt;        &lt;dbl&gt;\n 1 Washington State Ferries                                   Ferr…       1120. \n 2 Woods Hole, Martha's Vineyard and Nantucket Steamship Aut… Ferr…        829. \n 3 New York City Economic Development Corporation             Ferr…        188. \n 4 Anaheim Transportation Network                             Bus          170. \n 5 Massachusetts Bay Transportation Authority                 Ligh…        131. \n 6 Port Authority Trans-Hudson Corporation                    Heav…        119. \n 7 Massachusetts Bay Transportation Authority                 Heav…        101. \n 8 MTA Long Island Rail Road                                  Comm…         98.6\n 9 Metro-North Commuter Railroad Company, dba: MTA Metro-Nor… Comm…         94.4\n10 MTA New York City Transit                                  Heav…         91.5\n# ℹ 136 more rows\n\n\nWashington State Ferries generate the most revenue at $1,120 for each mile that its ferry operates, whereas MTA NYC Transit’s heavy rail generates $91.50 per VRM. A high fare per VRM may suggest that a transit system is utilizing resources and providing services to riders efficiently. Essentially, it’s a measure of a system’s operations and financial viability. It is possible that less common transit modes such as ferries may receive more revenue per mile traveled due to the generally niche group of commuters the agency serves.\n\n\nConcluding Notes\nIt now comes to a point where we should ask ourselves, which is the most efficient transit system in the country? The answer to this opinionated question depends on how we define efficiency. We’ve discussed total passenger fares compared to UPT and VRM, both of which measure efficiency from different perspectives - passenger usage versus services provided. Does a financially self-sustaining transit system necessarily mean it’s more efficient? Or maybe low expenses per rider would be a better measure of efficiency, because it would suggest a transit system’s ability to provide affordable services to its riders.\nIn this case, we’ll define efficiency to be the cost associated with each passenger ride (expense per UPT) and highest number of riders (UPT). From the analysis above, we did find Anaheim Transportation Network to have the lowest ridership costs. So from the looks of it, it seems that Anaheim Transportation Network (ATN) would be the most efficient transit system in the country. However, as already emphasized throughout this project, the size and scope of services provided by transit systems play a crucial role with respect to its efficiency. While ATN bus service appears to be cost effective, it is also a way smaller system when compared to major transit systems such as the MTA (specifically their heavy rail services). Now, the MTA’s cost per passenger (for heavy rail) is more than double of that of ANT. But being that the MTA serves the most passengers, and despite their existing challenges to cover operational costs with fare revenues, I would say that their system is still one of the most efficient transit services across the country. Overall, I would answer this question in two ways; ANT is considered the most efficient transit service among smaller-scaled systems, while New York City’s MTA services ranks the same when compared against larger-scaled systems."
  },
  {
    "objectID": "mp01.html#section",
    "href": "mp01.html#section",
    "title": "Exploring the Fiscal Characteristics of Major US Public Transit Systems",
    "section": "09/22/2024",
    "text": "09/22/2024"
  },
  {
    "objectID": "mp01.html#the-data-explained",
    "href": "mp01.html#the-data-explained",
    "title": "Exploring the Fiscal Characteristics of Major US Public Transit Systems",
    "section": "The Data Explained",
    "text": "The Data Explained\nWhile the farebox ratio does provide key insights about a transit’s operational efficiency, it is a starting point to the many other factors that subjectively impact what a healthy transit service may look like. In this analysis, I’ll be using data obtained from the National Transit Database (NTD) to analyze and judge the efficiency of US transit systems. More specifically, focus will be placed on farebox revenues, total revenues and expenses, and the total number of passenger trips and vehicle miles traveled. Data is compiled over the years from as early as 2002 to present day, however for purposes of my analysis, I will be using the 2022 version of the reports. This is done by combining several variables from the 2022 Fare Revenue table, the latest Monthly Ridership tables, and the 2022 Operating Expenses reports.\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'tibble' was built under R version 4.3.2\n\n\nWarning: package 'tidyr' was built under R version 4.3.2\n\n\nWarning: package 'readr' was built under R version 4.3.2\n\n\nWarning: package 'purrr' was built under R version 4.3.2\n\n\nWarning: package 'dplyr' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\nWarning: package 'forcats' was built under R version 4.3.2\n\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"2022_fare_revenue.xlsx\" in your project\n  # directory.\n  download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                destfile=\"2022_fare_revenue.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`, \n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`)\n\n# Next, expenses\nif(!file.exists(\"2022_expenses.csv\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"2022_expenses.csv\" in your project\n  # directory.\n  download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                destfile=\"2022_expenses.csv\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(`NTD ID`, \n         `Agency`,\n         `Total`, \n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n# Monthly Transit Numbers\nlibrary(tidyverse)\nif(!file.exists(\"ridership.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"ridership.xlsx\" in your project\n  # directory.\n  download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                destfile=\"ridership.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`, \n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nAfter cleaning and joining the data, it is finally ready for our use. The table below is a sample of our data, showcasing the variables used in uncovering farebox recovery ratios and ridership trends over time:\n\nif(!require(\"DT\")) install.packages(\"DT\")\n\nWarning: package 'DT' was built under R version 4.3.3\n\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n    mutate(month=as.character(month)) |&gt; \n    DT::datatable()"
  },
  {
    "objectID": "mp01.html#objective",
    "href": "mp01.html#objective",
    "title": "Exploring the Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Objective",
    "text": "Objective\nAs cities expand and populations grow across the US, public transit continues to play a critical role in minimizing harmful emissions, reducing congestion, and is essential in providing accessible transit options. However, at what cost is it worth? Ultimately, passengers would love the idea of free transportation. Yet the financial health of transit systems across the country remains a challenge to most areas. One way this is measured is the farebox recovery ratio, that is, how much a transit system’s costs are covered by passenger fares. Essentially, it’s the fraction of revenues made from the fares we pay instead of taxes. It then comes to a question where we ask ourselves, are the transit systems we use really worth the money we pay? What does a fiscally healthy transit service look like and how efficient is it? How do transit systems across the country compare?"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "The Business of Show Business: A Deep Dive into the Film Industry",
    "section": "",
    "text": "Fatima W. | 10/18/2024  What comes to mind when you’re picking a movie to watch? Do you look for a certain genre, actors/actresses, or directors/producers? There’s hundreds of thousands of movies that exist, and there’s thousands more to be made. One important fact about the entertainment industry is that its consumers have an insatiable demand for content – but not just any content. Surely, there are thousands of lesser known films/television shows that flopped or didn’t receive the recognition it may have deserved. At the same time, there are hundreds of movies deemed successful in their own ways, whether it’s due to earned box office sales, critic reviews, award nominations, or average rating. With that being said, what determines the success of a movie? The motivation of this project is to not only understand what makes a film successful, but to develop a non-financial success metric to be used in deciding what kind of movie should be remade, and how. So grab some popcorn and get comfy, you’re in for a treat!\n\nThe Data Explained\nTo begin the analysis, we’ll be using a collection of non-commercial datasets from IMDb, the Internet Movie Database that provides information on millions of films/television shows. These databases include information about movies/TV series, the cast and crew members, average ratings submitted by users, number of people who have rated these films, and more. More detailed information can be found [here,] (https://developer.imdb.com/non-commercial-datasets/) however I’ve included a mapped graphic to help visualize the breakdown of each dataset I’ll be using in conjunction with one another. This mapping will prove to be useful to refer to when analyzing the coding portions in this analysis.\n\n\n\nVisual Mapping of Data Sets\n\n\n\n\nClick to view code\n# load in all our data and packages\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(DT)\nlibrary(tidyr)\n\nget_imdb_file &lt;- function(fname){\n  BASE_URL &lt;- \"https://datasets.imdbws.com/\"\n  fname_ext &lt;- paste0(fname, \".tsv.gz\")\n  if(!file.exists(fname_ext)){\n    FILE_URL &lt;- paste0(BASE_URL, fname_ext)\n    download.file(FILE_URL, \n                  destfile = fname_ext)\n  }\n  as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE))\n}\n\n\n\n\nClick to view code\nNAME_BASICS      &lt;- get_imdb_file(\"name.basics\")\n\nTITLE_BASICS     &lt;- get_imdb_file(\"title.basics\")\n\nTITLE_EPISODES   &lt;- get_imdb_file(\"title.episode\")\n\nTITLE_RATINGS    &lt;- get_imdb_file(\"title.ratings\")\n\nTITLE_CREW       &lt;- get_imdb_file(\"title.crew\")\n\nTITLE_PRINCIPALS &lt;- get_imdb_file(\"title.principals\")\n\n\n\n\nCleaning the Data for Usability\nBecause the data sets are so large, we’ll restrict our attention to people with at least two “known for” credits within the NAME_BASICS table. Since there are also a long list of obscure records, we’ll filter out and remove titles with less than 100 ratings. We can see that these titles make up about 75% of the entire data set. The same filtering will be performed on our other data sets.\n\n\nClick to view code\nNAME_BASICS &lt;- NAME_BASICS |&gt; \n  filter(str_count(knownForTitles, \",\") &gt; 1)\n\nTITLE_RATINGS |&gt;\n    pull(numVotes) |&gt;\n    quantile()\n\n\n     0%     25%     50%     75%    100% \n      5      11      26     101 2950150 \n\n\nClick to view code\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n  filter(numVotes &gt;= 100)\n\nTITLE_BASICS &lt;- TITLE_BASICS |&gt;\n  semi_join(TITLE_RATINGS, \n            join_by(tconst == tconst))\n\nTITLE_CREW &lt;- TITLE_CREW |&gt;\n  semi_join(TITLE_RATINGS, \n            join_by(tconst == tconst))\n\nTITLE_EPISODES_1 &lt;- TITLE_EPISODES |&gt;\n  semi_join(TITLE_RATINGS, \n            join_by(tconst == tconst))\nTITLE_EPISODES_2 &lt;- TITLE_EPISODES |&gt;\n  semi_join(TITLE_RATINGS, \n            join_by(parentTconst == tconst))\n\nTITLE_EPISODES &lt;- bind_rows(TITLE_EPISODES_1,\n                            TITLE_EPISODES_2) |&gt;\n  distinct()\n\nTITLE_PRINCIPALS &lt;- TITLE_PRINCIPALS |&gt;\n  semi_join(TITLE_RATINGS, join_by(tconst == tconst))\n\nrm(TITLE_EPISODES_1)\nrm(TITLE_EPISODES_2)\n\n\nAfter extracting our data, our first task is to ensure each variable is properly assigned to its data type or mode. Most columns in these datasets are read in as character vectors, however some should be classified as numeric or logical. So we’ll clean these columns in each table.\n\n\nClick to view code\nNAME_BASICS &lt;- NAME_BASICS |&gt;\n  mutate(birthYear = as.numeric(birthYear),\n         deathYear = as.numeric(deathYear))\n\nglimpse(TITLE_BASICS)\n\n\nRows: 373,834\nColumns: 9\n$ tconst         &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt…\n$ titleType      &lt;chr&gt; \"short\", \"short\", \"short\", \"short\", \"short\", \"short\", \"…\n$ primaryTitle   &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierrot…\n$ originalTitle  &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierrot…\n$ isAdult        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ startYear      &lt;chr&gt; \"1894\", \"1892\", \"1892\", \"1892\", \"1893\", \"1894\", \"1894\",…\n$ endYear        &lt;chr&gt; \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\",…\n$ runtimeMinutes &lt;chr&gt; \"1\", \"5\", \"5\", \"12\", \"1\", \"1\", \"1\", \"1\", \"45\", \"1\", \"1\"…\n$ genres         &lt;chr&gt; \"Documentary,Short\", \"Animation,Short\", \"Animation,Come…\n\n\nClick to view code\nTITLE_BASICS &lt;- TITLE_BASICS |&gt;\n  mutate(isAdult = as.logical(isAdult),\n         startYear = as.numeric(startYear),\n         endYear = as.numeric(endYear),\n         runtimeMinutes = as.numeric(runtimeMinutes))\n\nglimpse(TITLE_EPISODES)\n\n\nRows: 3,019,265\nColumns: 4\n$ tconst        &lt;chr&gt; \"tt0045960\", \"tt0046855\", \"tt0048378\", \"tt0048562\", \"tt0…\n$ parentTconst  &lt;chr&gt; \"tt0044284\", \"tt0046643\", \"tt0047702\", \"tt0047768\", \"tt0…\n$ seasonNumber  &lt;chr&gt; \"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"3\", \"3\", \"…\n$ episodeNumber &lt;chr&gt; \"3\", \"4\", \"6\", \"10\", \"4\", \"20\", \"5\", \"2\", \"20\", \"6\", \"2\"…\n\n\nClick to view code\nTITLE_EPISODES &lt;- TITLE_EPISODES |&gt;\n  mutate(seasonNumber = as.numeric(seasonNumber),\n         episodeNumber = as.numeric(episodeNumber))\n\nglimpse(TITLE_RATINGS)\n\n\nRows: 373,834\nColumns: 3\n$ tconst        &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt0…\n$ averageRating &lt;dbl&gt; 5.7, 5.6, 6.5, 5.4, 6.2, 5.0, 5.4, 5.4, 5.4, 6.8, 5.2, 7…\n$ numVotes      &lt;dbl&gt; 2094, 283, 2102, 183, 2837, 196, 889, 2242, 215, 7720, 3…\n\n\nClick to view code\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n  mutate(averageRating = as.numeric(averageRating),\n         numVotes = as.numeric(numVotes))\n\nglimpse(TITLE_CREW)\n\n\nRows: 373,530\nColumns: 3\n$ tconst    &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt00000…\n$ directors &lt;chr&gt; \"nm0005690\", \"nm0721526\", \"nm0721526\", \"nm0721526\", \"nm00056…\n$ writers   &lt;chr&gt; \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"nm0…\n\n\nClick to view code\nTITLE_CREW &lt;- TITLE_CREW |&gt;\n  mutate(tconst = as.character(tconst),\n         directors = as.character(directors))\n\nglimpse(TITLE_PRINCIPALS)\n\n\nRows: 6,613,824\nColumns: 6\n$ tconst     &lt;chr&gt; \"tt0000001\", \"tt0000001\", \"tt0000001\", \"tt0000001\", \"tt0000…\n$ ordering   &lt;dbl&gt; 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 5, 1, 2, 1, 2, 3, 1, 2, 3, 4,…\n$ nconst     &lt;chr&gt; \"nm1588970\", \"nm0005690\", \"nm0005690\", \"nm0374658\", \"nm0721…\n$ category   &lt;chr&gt; \"self\", \"director\", \"producer\", \"cinematographer\", \"directo…\n$ job        &lt;chr&gt; \"\\\\N\", \"\\\\N\", \"producer\", \"director of photography\", \"\\\\N\",…\n$ characters &lt;chr&gt; \"[\\\"Self\\\"]\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\…\n\n\nClick to view code\nTITLE_PRINCIPALS &lt;- TITLE_PRINCIPALS |&gt;\n  mutate(job = as.character(job),\n         characters = as.character(characters))\n\n\n\n\nAn Exploratory Analysis of the TV Production & Film Industry\nNow that we’ve gathered and cleaned our data, we’ll begin analyzing and uncovering insights. Firstly, let’s find out how many movies, TV series, and TV episodes we have present in our data set. Shown below, there are roughly just over 130K movies, 155K TV episodes, and nearly 30K TV series.\n\n\nClick to view code\ntitle_counts &lt;- TITLE_BASICS |&gt;\n    group_by(titleType) |&gt;\n  summarize(count = n()) |&gt;\n  filter(titleType %in% c('movie', 'tvSeries', 'tvEpisode'))\n\ncolnames(title_counts) &lt;- c('Title Type', 'Number of Movies')\ntitle_counts |&gt;\n  DT::datatable()\n\n\n\n\n\n\nWith this many titles across various types of title types, I wanted to know who is the oldest living person in our data set and what their profession is. One important thing to consider, however, is within the NAME_BASICS data set, there is a double meaning to the NA values in the deathYear column. These NA values may indicate that the year of death is “unknown” or “still alive/not dead yet.” According to the Guinness World Records, the oldest person alive in the world is [Tomiko Itooka] (https://www.guinnessworldrecords.com/world-records/84549-oldest-person-living), who was born in 1908. Therefore, to approach this finding, we’ll filter out people who were born in 1908 onward and NA values. As a result, the oldest living person in our data set is Angel Acciaresi, who was an assistant director, director, and writer. Seeing this person’s age, it’s a nice reminder and interesting to think about how long the entertainment industry has existed and how far it’s come.\n\n\nClick to view code\noldest_person &lt;- NAME_BASICS |&gt;\n  filter(is.na(deathYear), birthYear &gt;= 1908) |&gt;\n  mutate(age = 2024 - birthYear) |&gt;\n  arrange(desc(age)) |&gt;\n  select(primaryName, birthYear, primaryProfession, age) |&gt;\n  slice(1)\n\ncolnames(oldest_person) &lt;- c('Name', 'Year of Birth', 'Profession', 'Age')\noldest_person |&gt;\n  DT::datatable()\n\n\n\n\n\n\n\n\nTV Series Observations\nI’m interested in uncovering some insights about TV series productions and their ratings given a baseline of at least 200,000 IMDb ratings. There exists one TV Episode in this data set that fits this criteria, that is, the episode Ozymandias from the American crime drama television series, Breaking Bad. In fact, this episode is ranked the number one [“Best TV Episodes”] (https://en.wikipedia.org/wiki/Ozymandias_(Breaking_Bad)#:~:text=%22Ozymandias%22%20frequently%20tops%20polls%20of,‘Best%20TV%20Episodes’%20ranking.) for its perfect 10/10 rating.\n\n\nClick to view code\nperfect_tv_ep &lt;- TITLE_BASICS |&gt;\n  filter(titleType == 'tvEpisode') |&gt;\n  left_join(TITLE_RATINGS, by = 'tconst') |&gt;\n  filter(averageRating == 10, numVotes &gt;= 200000) |&gt;\n  select(primaryTitle, genres, averageRating, numVotes)\n\ncolnames(perfect_tv_ep) &lt;- c('TV Episode Title', 'Genres', 'Avg. Rating', 'Number of Votes')\nperfect_tv_ep |&gt;\n  DT::datatable()\n\n\n\n\n\n\nI also wanted to know which TV series has the highest average rating. To answer this, I’ll be setting the benchmark to series with more than 12 episodes, and I’ll use the average rating of the TV series as a whole, rather than averaging the sum of each TV series’ episodes’ ratings. As a result, the highest average rating of a TV series is 9.71, which belongs to “The Youth Memories.”\nOf all the TV series that exist across cultures worldwide in multiple languages and genres, a Chinese romance drama ranked the highest average rating. What made this specific drama stand out? Could it be due to its cultural appeal – for example, are Chinese dramas more successful/popular than Turkish dramas? Or maybe it’s the series’ romance elements that attract viewers to its show. As someone who occasionally watches C-dramas, I think this finding is interesting and important to consider as we deepen our analysis going further about what makes a movie/series successful.\n\n\nSpecific Movie Observations\nNext, I wanted to take a look at well known actors/actresses and the projects they’re known for. More specifically, I’ll take a look at American actor Mark Hamill and the average ratings of movies he took part in. Unsurprisingly, Hamill is known for his role in the Star Wars original and sequel trilogies. However, take a look at the average ratings and the ranking of each sequel. Normally, some may assume that movie sequels are particularly bad, which is, of course, subjective and opinion-based. Keeping this in mind, we see that’s not exactly the case where Star Wars: Episode V - The Empire Strikes Back receives a higher ranking than Star Wars: Episode IV - A New Hope, which was released three years prior.\n\n\nClick to view code\nmark_hamill_top4_projects &lt;- NAME_BASICS |&gt;\n  filter(primaryName == 'Mark Hamill') |&gt;\n  separate_longer_delim(knownForTitles, ',') |&gt;\n  rename(tconst = knownForTitles) |&gt;\n  left_join(TITLE_BASICS, by = \"tconst\") |&gt; \n  left_join(TITLE_RATINGS, by = \"tconst\") |&gt; \n  arrange(desc(averageRating), desc(numVotes)) |&gt;\n  slice_head(n = 4) |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes)\n\ncolnames(mark_hamill_top4_projects) &lt;- c('Movie Title', 'Year of Release', 'Avg. Rating', 'Number of Votes')\nmark_hamill_top4_projects |&gt;\n  DT::datatable()\n\n\n\n\n\n\n\n\nThe Rise & Fall of TV Series: Happy Days\nHave you ever heard of the phrase “jump the shark”? This is a common idiom used to describe a moment where a once-great show becomes ridiculous and rapidly loses watchers due to its quality. This idiom actually originated from a 1974 American sitcom that ran for 11 seasons, called “Happy Days.” In season 5 episode 3, one of the show’s characters, Fonzie (Henry Winkler) takes on the challenge to prove his bravery by water-skiing over a confined shark in the water. As the series continued on with their seasons, watchers grew tired of the show and mentioned that it was this season’s episode where the entire series began to go downhill, hence the phrase, “jump the shark.” The reason why I bring up this point is to see how the show performed before and after this season’s episode. More specifically, is it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?\nBecause there are 11 seasons, we’ll determine seasons 1 through 5 to be “early seasons” and seasons 6 through 11 to be “later seasons.” As shown below, the series indeed had a higher average rating in earlier seasons than that of later seasons.\n\n\nClick to view code\n# Is it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?\n\nhappydays &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle == 'Happy Days', titleType == 'tvSeries') |&gt;\n  select(startYear, endYear, tconst)\n# Happy Days tconst = tt0070992\n\nhappydays_getavg &lt;- TITLE_EPISODES |&gt;\n  inner_join(happydays, join_by(parentTconst == tconst)) |&gt;\n  left_join(TITLE_RATINGS, join_by(tconst == tconst)) |&gt;\n  select(seasonNumber, episodeNumber, averageRating)\n\nhappydays_earlyavg &lt;- happydays_getavg |&gt;\n  filter(seasonNumber &lt;= 5) |&gt;\n  summarize(avg_rating1 = round(mean(averageRating, na.rm = TRUE), 2))\n\nhappydays_lateravg &lt;- happydays_getavg |&gt;\n  filter(seasonNumber &gt; 5) |&gt;\n  summarize(avg_rating2 = round(mean(averageRating, na.rm = TRUE), 2))\n  \nhappydays_avg &lt;- cbind(happydays_earlyavg, happydays_lateravg)\ncolnames(happydays_avg) &lt;- c('Avg Rating Seasons 1-5', 'Avg Rating Seasons 6-11')\n\nhappydays_avg |&gt;\n  DT::datatable()\n\n\n\n\n\n\n\n\nQuantifying Success – Development of a Success Metric\nNow that we’ve explored some of our data, our main goal is to propose new movies deemed to be successful. In order to do that, however, we need to come up with a way of measuring the success of a movie given our non-financial data sets, or in other words, IMDb ratings and votes. And while there is no right way to measure success, we’ll assume that successful projects will have both a high average IMDb rating and a large number of ratings, which would indicate quality and broad awareness, respectively.\nI had a few approaches in my development of a success metric. Initially, I thought about adding the averageRating with the log of numVotes , where taking the log of vote count will help compress large values. However, this seemed too simple of a calculation to me because I felt that there needed to be some kind of weight added to each factor. I thought about weighing the average rating and number of votes equally, shown below:\n\n\nClick to view code\ntitle_ratings_test2 &lt;- TITLE_RATINGS |&gt;\n  mutate(success_score = round((averageRating * 0.50)  + (log(numVotes) * 0.50), 2)) |&gt;\n  arrange(desc(success_score)) |&gt;\n  head(10)\n\ntitle_ratings_test2 |&gt;\n  DT::datatable()\n\n\n\n\n\n\nThis method may have been satisfactory, however I still felt like there is a better way to develop a success metric because I assumed that average rating and number of votes should be weighed equally. Although our data sets contain all votes for each title, I felt that not all votes have the same impact/weight on the final rating. During this process, I wanted to remain mindful of the possibility that people will normally rate and vote on titles that they have strong feelings for, whether they are good or bad. For example, a movie may have been so horrible for someone that they went out of their way to submit a low rating, whereas someone who may have felt indifferent to a movie didn’t bother to submit a rating at all. Had they submitted one though, maybe it would’ve been an average rating like 5/10. I gave one more try where I used the weighted average method and decided to use a benchmark of 10,000 votes as the minimum number of votes that makes a movie successful. To put it into a simple mathematical formula:\n\nUsing weighted average to find the success score Success Score = [(R * v) + (C * m)] / (v + m)\nwhere R = average rating of each title v = number of votes of each title C = the mean rating of all titles m = minimum number of votes that considers a movie to be successful (10,000 votes)\n\nThis ended up being my chosen method, where I also used log in calculating the number of votes.\n\n\nClick to view code\nmin_numvotes &lt;- 10000\nmean_rating_alltitles &lt;- mean(TITLE_RATINGS$averageRating)\n\nTITLE_RATINGS_FINAL &lt;- TITLE_RATINGS |&gt;\n  left_join(TITLE_BASICS, by = 'tconst') |&gt;\n  filter(titleType == 'movie') |&gt;\n  mutate(success_score = round((averageRating * (log(numVotes))) + \n                            (min_numvotes * mean_rating_alltitles) / ((log(numVotes)) + min_numvotes), 2))\nTITLE_RATINGS_FINAL |&gt;\n  DT::datatable()\n\n\n\n\n\n\n\n\nPutting Our Success Metric to Test\nNow that the success metric is chosen, we’ll perform data validation by answering a series of questions. First, we’ll choose the top 5-10 movies based on the success metric and confirm that they were indeed box office successes.\n\n\nClick to view code\ntop_10movies &lt;- TITLE_RATINGS_FINAL |&gt;\n  arrange(desc(success_score)) |&gt;\n  select(primaryTitle, averageRating, numVotes, success_score, startYear) |&gt;\n  head(10)\n\ncolnames(top_10movies) &lt;- c('Movie Title', 'Avg Rating', 'Number of Votes', 'Success Score', 'Year Released')\ntop_10movies |&gt;\n  DT::datatable()\n\n\n\n\n\n\nThe majority of the movies listed above are indeed box office successes, however there is one exception, that is, The Shawshank Redemption. This movie was considered a box office flop when it was released in 1944, where its initial box office earned only $16 million. Despite this disappointment, the movie performed successfully by shipping VHS rental copies across the U.S., obtaining a much larger audience than it ever did in its box office opening. Although its success wasn’t immediate, word of mouth spread as the movie became a [beloved and popular film.] (https://en.wikipedia.org/wiki/The_Shawshank_Redemption#:~:text=While%20The%20Shawshank%20Redemption%20received,1997%2C%20further%20increasing%20its%20popularity.)\nContinuing with our data validation, we’ll now choose 3 to 5 movies with large numbers of IMDb votes yet low success scores and confirm that they are indeed of low quality. Shown below, our results are indeed low quality.\n\n\nClick to view code\npoor_performance_movies &lt;- TITLE_RATINGS_FINAL |&gt;\n  arrange(success_score, desc(numVotes)) |&gt;\n  select(primaryTitle, averageRating, numVotes, success_score, startYear) |&gt;\n  head(5)\n\ncolnames(poor_performance_movies) &lt;- c('Movie Title', 'Avg Rating', 'Number of Votes', 'Success Score', 'Year Released')\npoor_performance_movies |&gt;\n  DT::datatable()\n\n\n\n\n\n\nAdditionally, we’ll choose a prestigious actor director and confirm that they have many projects with high scores based on our success metric. For this, I’ll test actress Meryl Streep. Shown below, we can see Streep’s various works, many of which performed well with high success scores.\n\n\nClick to view code\nstreep_projects &lt;- NAME_BASICS |&gt;\n  filter(primaryName == 'Meryl Streep') |&gt;\n  left_join(TITLE_PRINCIPALS, by = c('nconst' = 'nconst')) |&gt;\n  left_join(TITLE_RATINGS_FINAL, by = c('tconst' = 'tconst')) |&gt;\n  select(tconst, primaryTitle, success_score, averageRating) |&gt;\n  drop_na() |&gt;\n  arrange(desc(success_score)) |&gt;\n  select(primaryTitle, averageRating, success_score)\n\ncolnames(streep_projects) &lt;- c('Movie Title', 'Avg Rating', 'Success Score')\nstreep_projects |&gt;\n  DT::datatable()\n\n\n\n\n\n\nAnd in the spirit of Halloween and all things spooky, I’ll test [5 horror movies that have won Oscars] (https://www.fangoria.com/oscar-winning-horror-movies/#:~:text=The%20Silence%20of%20the%20Lambs%20(1991)&text=Jonathan%20Demme%27s%20The%20Silence%20of,Tom%20Fleischman%20and%20Christopher%20Newman.) in the past as my next “spot check” validation. The Oscars are widely considered to be one of the most prestigious awards in the film industry, so we should expect to see these award-winning horror films to have high success scores. Familiar titles shown below prove this to be true.\n\n\nClick to view code\nhorror_films &lt;- c('Alien', 'The Exorcist', 'Sleepy Hollow', 'The Silence of the Lambs', 'Beetlejuice')\n  \nhorror_awards &lt;- TITLE_RATINGS_FINAL |&gt;\n  filter(primaryTitle %in% horror_films) |&gt;\n  select(primaryTitle, averageRating, numVotes, success_score, startYear)\n\ncolnames(horror_awards) = c('Movie Title', 'Average Rating', \"Number of Votes\", 'Success Score', 'Year of Release')\nhorror_awards |&gt;\n  DT::datatable()\n\n\n\n\n\n\nLastly, we’ll come up with a numerical threshold for a project deemed to be successful, which will be the 70th percentile. In other words, movies with success scores higher than 70% of all success score values are determined to be “solid” or better.\n\n\nClick to view code\nthreshold &lt;- quantile(TITLE_RATINGS_FINAL$success_score, 0.7, na.rm = TRUE)\n\nSolid_Movies &lt;- TITLE_RATINGS_FINAL |&gt;\n  filter(success_score &gt; quantile(TITLE_RATINGS_FINAL$success_score, 0.7, na.rm = TRUE)) |&gt;\n  select(primaryTitle, averageRating, numVotes, success_score, startYear, genres)\n\nSolid_Movies |&gt;\n  DT::datatable()\n\n\n\n\n\n\n\n\nExamining Success by Genre & Decade\nNow that we have a working proxy for success, it’s time to look at trends in success over time. To begin, let’s take a look at the genre with the most successes in each decade. Shown below, we can see that drama earns the most successes. Because many titles are recorded to have multiple genres, it’s very likely that there is more to be said about these drama titles. For example, dramas that also contain romance or action.\n\n\nClick to view code\nsuccessful_genre &lt;- Solid_Movies |&gt;\n  separate_longer_delim(genres, ',') |&gt;\n  mutate(decade = (floor(startYear / 10)) * 10) |&gt;\n  group_by(decade, genres) |&gt;\n  summarize(movie_count = n()) |&gt;\n  ungroup() |&gt;\n  group_by(decade) |&gt;\n  slice_max(movie_count, n = 1) |&gt;\n  ungroup()\n\ncolnames(successful_genre) = c('Decade', 'Genre', 'Movie Count')\nsuccessful_genre |&gt;\n  DT::datatable()\n\n\n\n\n\n\nClick to view code\nsuccessful_genre_plot &lt;- ggplot(successful_genre, aes(x = Decade, y = `Movie Count`, fill = Genre)) +\n  geom_col() +\n  xlab('Decade') +\n  ylab('Number of Movies') +\n  theme_bw() +\n  scale_fill_brewer(type = 'qual', palette=4) +\n  ggtitle('Most Successful Movie Genre by Decade')\n  \nsuccessful_genre_plot\n\n\n\n\n\n\n\n\n\nTo dig deeper into these genres, let’s take a look at genres that consistently have the most successes over time. Because IMDb lists 31 movie genres in total, we’ll just look at the top 10 since it’ll be difficult to grasp everything visually. Unsurprisingly, drama is a prevalent genre that continues to thrive throughout the decades, however it’s also worth mentioning that comedy and action genres have also been growing successful. We’ll keep this information in mind as we progress further.\n\n\nClick to view code\ngenre_success_by_decade &lt;- Solid_Movies |&gt;\n  separate_longer_delim(genres, ',') |&gt;\n  mutate(decade = (floor(startYear / 10)) * 10) |&gt;\n  group_by(decade, genres) |&gt;\n  summarize(movie_count = n()) |&gt;\n  ungroup() |&gt;\n  group_by(decade) |&gt;\n  slice_max(movie_count, n = 10, with_ties = FALSE) |&gt;\n  mutate(movies_cumulative = cumsum(movie_count)) |&gt;\n  ungroup() |&gt;\n  arrange(decade, movies_cumulative)\n\n# It's easier to visualize this output below:\n\ngenre_success_by_decade_plot &lt;- ggplot(genre_success_by_decade, aes(x = decade, \n                                y = movie_count, color = genres)) +\n  geom_point() +\n  xlab('Decade') +\n  ylab('Number of Movies') +\n  geom_line() +\n  theme_bw() +\n  scale_color_brewer(type = 'qual', palette = 2) +\n  ggtitle('Successful Movie Genres by Decade Accumulated Over Time')\n\ngenre_success_by_decade_plot\n\n\n\n\n\n\n\n\n\nIn more recent years since 2010, we can see the genres shown below with the most successes. Again, drama proves itself to be the leading genre with most successes. Yet it’s crucial to consider that it’s possible these genres only have a large number of successes because there are many productions in that genre. In other words, drama may be an over saturated genre in the entertainment industry.\n\n\nClick to view code\nsuccesses_2010 &lt;- Solid_Movies |&gt;\n  separate_longer_delim(genres, ',') |&gt;\n  mutate(decade = (floor(startYear / 10)) * 10) |&gt;\n  filter(decade &gt;= 2010) |&gt;\n  group_by(genres) |&gt;\n  summarize(movie_count = n()) |&gt;\n  slice_max(movie_count, n = 10) |&gt;\n  arrange(desc(movie_count))\n\nsuccesses_2010_plot &lt;- ggplot(successes_2010, aes(x = genres, y = movie_count, fill = genres)) +\n  geom_col() +\n  xlab('Genre') +\n  ylab('Number of Movies') +\n  theme_bw() +\n  scale_fill_brewer(type = 'qual', palette=8) + \n  ggtitle('Count of Successful Movies by Genre Since 2010')\n\nsuccesses_2010_plot\n\n\n\n\n\n\n\n\n\nAs we’ve mentioned earlier, many of these drama titles are intertwined with many other genres such as action, adventure, comedy, and sci-fi. We can see this in popular movies released in 2010 onward as most titles fall under more than just one category. Keeping this collection of observations in mind, I’ve decided to select action intertwined with sci-fi and adventure for my upcoming movie project remake.\n\n\nClick to view code\ngenres_recent_years &lt;- Solid_Movies |&gt;\n  filter(startYear &gt;= 2010) |&gt;\n  arrange(desc(startYear), desc(success_score)) |&gt;\n  select(primaryTitle, startYear, genres, success_score)\n\ncolnames(genres_recent_years) &lt;- c('Movie Title', 'Year of Release', 'Genres', 'Success Score')\ngenres_recent_years |&gt;\n  DT::datatable(caption = 'Genres of Successful Movies Made in 2010 & Onward')\n\n\n\n\n\n\n\n\nFinding Successful Personnel in the Genres\nIn producing my project remake, I’ve decided to work with director David Leitch, who is an American filmmaker that frequently works in action, stunts, and other genres. Take a look at some of his projects and their success scores. His strong background in action films allowed him to direct successful action-packed movies such as Atomic Blonde and Deadpool 2, all of which include elaborate fight scenes, shootouts, and car chases. Surely, David Leitch proves to be a competent, skilled director in this genre.\n\n\nClick to view code\nleitch &lt;- NAME_BASICS |&gt;\n  filter(primaryName == 'David Leitch')\n\nleitch_movies &lt;- TITLE_PRINCIPALS |&gt;\n  filter(nconst == 'nm0500610') |&gt;\n  left_join(TITLE_RATINGS, join_by(tconst == tconst)) |&gt;\n  left_join(TITLE_BASICS, join_by(tconst == tconst)) |&gt;\n  filter(category == 'director' & titleType == 'movie') |&gt;\n  arrange(desc(averageRating)) |&gt;\n  select(primaryTitle)\n\nleitch_movies_final &lt;- leitch_movies |&gt;\n  left_join(Solid_Movies, join_by(primaryTitle == primaryTitle)) |&gt;\n  arrange(desc(success_score))\n\nleitch_movies_final_plot &lt;- ggplot(leitch_movies_final, aes(x = primaryTitle, y = success_score)) +\n  geom_col(fill = 'darkseagreen3') +\n  xlab('Movie Title') +\n  ylab('Success Score') +\n  theme_bw() +\n  ggtitle(\"David Leitch's Directed Movies With Success Scores\")\n\nleitch_movies_final_plot\n\n\n\n\n\n\n\n\n\nIn addition to David Leitch, I think Ryan Reynolds and Chris Pratt would be great actors to anchor this project of mine. Similar to Leitch, both Reynolds and Pratt have played major roles in successful movies such as Deadpool and Deadpool 2, and Guardians of the Galaxy, respectively; all of which are classified as action, adventure, and comedy. Not only this, but Reynolds has also worked with Leitch in the past in their making of Deadpool 2, making this a great opportunity to balance action with a little bit of humor.\n\n\nClick to view code\nactor_nconst &lt;- NAME_BASICS |&gt;\n  filter(primaryName == 'Ryan Reynolds' | primaryName == 'Chris Pratt') |&gt;\n  select(nconst, primaryName, knownForTitles) |&gt;\n  slice_head(n = 2) |&gt;\n  separate_longer_delim(knownForTitles, ',') |&gt;\n  left_join(TITLE_BASICS, join_by(knownForTitles == tconst))\n\nactor_movies &lt;- actor_nconst |&gt;\n  left_join(Solid_Movies, join_by(primaryTitle == primaryTitle)) |&gt;\n  arrange(desc(success_score)) |&gt;\n  select(primaryName, primaryTitle, startYear.x, genres.x, success_score)\n\ncolnames(actor_movies) &lt;- c('Actor', 'Movie Title', 'Year of Release', 'Genres', 'Success Score')\n\nactor_movies |&gt;\n  DT::datatable()\n\n\n\n\n\n\n\n\nNostalgia & Remakes\nFor my project, I’m choosing to remake the 1981, action/sci-fi film, [Escape from New York] (https://en.wikipedia.org/wiki/Escape_from_New_York). With an average rating of 7.1 and roughly over 160K votes, I believe this movie would be a great opportunity to remake given that it has not been remade yet.\n\n\nClick to view code\nescape_ny &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle == 'Escape from New York') |&gt;\n  left_join(TITLE_RATINGS, join_by(tconst == tconst)) |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes) |&gt;\n  slice(1)\n\ncolnames(escape_ny) &lt;- c('Movie Title', 'Year of Release', 'Average Rating', 'Number of Votes')\nescape_ny |&gt;\n  DT::datatable()\n\n\n\n\n\n\nOf course, however, there are quite a few legal matters at hand. A select few actors, directors, and writers are still alive since this movie was made just over 40 years ago. This would prompt me to contact our legal department to ensure our chances of securing the rights to our project.\n\n\nClick to view code\n# Derive tconst of movie Escape from New York\nescape_ny_tconst &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle == 'Escape from New York') |&gt;\n  select(tconst) |&gt;\n  slice(1)\n\n# tconst = tt0082340\n\nescape_ny_members &lt;- TITLE_PRINCIPALS |&gt;\n  filter(tconst == 'tt0082340') |&gt;\n  left_join(NAME_BASICS, join_by(nconst == nconst)) |&gt;\n  select(primaryName, birthYear, deathYear, primaryProfession)\n\ncolnames(escape_ny_members) &lt;- c('Name', 'Birth Year', 'Death Year (leave blank if not applicable)', 'Profession(s)')\nescape_ny_members |&gt;\n  DT::datatable()\n\n\n\n\n\n\n\n\nEscape from New York: Remaking of a Classic"
  }
]